@page "/peoplelist"
@inject HttpClient Http

<PageTitle>People</PageTitle>

<div class="container border p-1 rounded">
    <div class="row">
        <div class="col">
            <h2>People</h2>
        </div>
        <div class="col text-end">
            <label for="search">Filter</label>
            <input id="serach" @oninput="OnFilterCriteriaChange" />
        </div>
@*        <div class="col">
            userId: @clientprincipal.UserId
        </div>*@
    </div>
</div>
<div class="container border p-1 rounded">
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-info" @onclick="New">New</button>
        </div>
    </div>
</div>
<br/>
@if (list == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table fixed_header table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Hobby</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < list.Count; i++)
            {
                var index = i;
                <tr class="@GetTableRowClass(index)" @onclick="@(e => OnLineClick(index))" id="@index">
                    <td>@list[i].FirstName</td>
                    <td>@list[i].LastName</td>
                    <td>@list[i].Email</td>
                    <td>@list[i].HobbyDescrition</td>
                </tr>
            }
        </tbody>
    </table>

    @if (cardOpen)
    {
        <CardPage Caption="Person"
            CurrRec="@currRec"
            Hobbies="@hobbyList"
            OnCancel="@OnCancel"
            OnSave="@OnSave"
          OnDelete="@OnDelete" />
    }
}



@code {
    private bool cardOpen = false;
    private SharedLibrary.SystemData.ClientPrincipal? clientprincipal = new();
    private List<SharedLibrary.Person>? rawList = new();
    private List<SharedLibrary.Person>? list;
    private List<SharedLibrary.Hobby>? hobbyList = new ();
    private SharedLibrary.Person? currRec;
    private int currRecIndex = -1;
    private string filterCriteria = string.Empty;
    private string filterCriteria2 = string.Empty;
    private string userId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var clientPrincipalTask = Http.GetFromJsonAsync<SharedLibrary.SystemData.ClientPrincipal>("/api/clientprincipal");
        var personResponseTask = Http.GetAsync("/api/people");
        var hobbyListTask = Http.GetFromJsonAsync<List<SharedLibrary.Hobby>>("/api/hobby");
        await Task.WhenAll(clientPrincipalTask, hobbyListTask, personResponseTask);

        clientprincipal = clientPrincipalTask.Result;
        hobbyList = hobbyListTask.Result;
        var response = personResponseTask.Result;
        var body = response.Content.ReadAsStringAsync().Result;
        rawList = System.Text.Json.JsonSerializer.Deserialize<List<SharedLibrary.Person>>(body);
        list = System.Text.Json.JsonSerializer.Deserialize<List<SharedLibrary.Person>>(body);

        if (list is not null)
        {
            currRecIndex = 0;
            currRec = list[currRecIndex];
        }
    }

    private string GetTableRowClass(int index) =>
        index == currRecIndex ? "table-primary" : "";

    private void OnLineClick(int index)
    {
        currRecIndex = index;
        currRec = list[currRecIndex];

        OpenCard();
    }

    private void OpenCard()
    {
        cardOpen = true;
    }

    private void OnCancel(bool action)
    {
        cardOpen = false;
    }

    private async Task OnSave(SharedLibrary.Person rec)
    {
        currRec = rec;
        await Save();
        cardOpen = false;
    }

    private async Task OnDelete(SharedLibrary.Person rec)
    {
        currRec = rec;
        await Delete();
        cardOpen = false;
    }


    private void OnFilterCriteriaChange(ChangeEventArgs e)
    {

        filterCriteria = e?.Value?.ToString();
        try
        {
            list = rawList.Where(x =>
                (x.Email.Contains(filterCriteria, StringComparison.OrdinalIgnoreCase)) ||
                (x.LastName.Contains(filterCriteria, StringComparison.OrdinalIgnoreCase)) ||
                (x.FirstName.Contains(filterCriteria, StringComparison.OrdinalIgnoreCase))).ToList();
        }
        catch (Exception ex)
        {
            filterCriteria = ex.Message;
        }
    }


    private void New()
    {
        currRec = new();
        OpenCard();
    }

    private async Task Save()
    {
        var newEntry = string.IsNullOrWhiteSpace(currRec.RowKey);
        using var httpResponse = await Http.PostAsJsonAsync<SharedLibrary.Person>("api/people", currRec);
        currRec = await httpResponse.Content.ReadFromJsonAsync<SharedLibrary.Person>();
        if (newEntry)
        {
            rawList.Add(currRec);
            list.Add(currRec);
            currRecIndex = list.Count - 1;
        }
        list[currRecIndex] = currRec;

    }

    private async Task Delete()
    {
        // TODO: Dont use the partionkey here. Also, change the api endpoint
        await Http.DeleteAsync($"api/people/{currRec.PartitionKey}/{currRec.RowKey}");
        list.RemoveAt(currRecIndex);
        currRecIndex--;
        currRec = list[currRecIndex];
    }
}
